Query / Find Documents

query the movies collection to
1) get all documents
sol: db.movies.find().pretty()

2) get all documents with writer set to "Quentin Tarantino"
sol: db.movies.find({"writer":"Quentin Tarantino"}).pretty()

3) get all documents where actors include "Brad Pitt"
sol: db.movies.find({actors:"Brad Pitt"}).pretty()

4) get all documents with franchise set to "The Hobbit"
sol: db.movies.find({franchise:"The Hobbit"}).pretty()

5)  get all movies released in the 90s
sol: db.movies.find({$and: [{year:{$gt:1989}},{year:{$lt:2000}}]}).pretty()

6)  get all movies released before the year 2000 or after 2010
sol:  db.movies.find({$or: [{year:{$lt: 2000}},{year:{$gt:2010}}]}).pretty()


Update Documents

1) add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."

sol:  db.movies.update({title:"The Hobbit: An Unexpected Journey"},{$set:{"synopsis":"A reluctant hobbit, Bilbo Baggins sets out to the Lonely Mountain with a spirited group ofdwarves to reclaim their mountain home - and the gold within it - from thedragon Smaug."}})

2) add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring." 

sol:  db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{$set:{"synopsis":"The dwarves,along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaimErebor, their homeland, from Smaug. Bilbo Baggins is in possession of amysterious and magical ring."}})

3)  add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
sol: db.movies.update({title:"Pulp Fiction"},{$set: {actors:["John Travolta"
,"Uma Thurman","Samuel L. Jackson"]}})


Text Search

1) find all movies that have a synopsis that contains the word "Bilbo"
sol:  db.movies.find({synopsis:/Bilbo/}).pretty()

2) find all movies that have a synopsis that contains the word "Gandalf"
sol:   db.movies.find({synopsis:/Gandalf/}).pretty()

3) find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
sol:  db.movies.createIndex( { synopsis: "text" } )
      db.movies.find({$text:{$search:"Bilbo -Gandalf"}}).pretty()
	                 OR
	   db.movies.find({$and: [{synopsis:/Bilbo/},{synopsis:{$not:/Gandalf/}}]}).pretty()
	   
	   
4)  find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
sol:  db.movies.find({$or: [{synopsis:/Bilbo/},{synopsis:/Gandalf/}]}).pretty()

5)  find all movies that have a synopsis that contains the word "gold" and "dragon"
sol: db.movies.find({$and: [{synopsis:/gold/},{synopsis:/dragon/}]}).pretty()

Delete Documents

1) delete the movie "Pee Wee Herman's Big Adventure"
sol:  db.movie.remove({title:"Pee Wee Herman's Big Adventure"})

2)  delete the movie "Avatar"
sol:   db.movie.remove({title: "Avatar"})

collections

db.users.insert({username : "GoodGuyGreg",
first_name : "Good Guy",
last_name : "Greg"})

db.users.insert({username : ScumbagSteve,
full_name :{
first : "Scumbag",
last : "Steve"}})

db.posts.insert({username : "GoodGuyGreg",
title : "Passes out at party",
body : "Wakes up early and cleans house"})

db.posts.insert({username : "GoodGuyGreg",
title : "Steals your identity",
body : "Raises your credit score"})

db.posts.insert({username : "GoodGuyGreg",
title : "Reports a bug in your code",
body : "Sends you a Pull Request"})

db.posts.insert({username : "ScumbagSteve",
title : "Borrows something",
body : "Sells it"})

db.posts.insert({username : "ScumbagSteve",
title : "Borrows everything",
body : "The end"})

db.posts.insert({username : "ScumbagSteve",
title : "Forks your repo on github",
body : "Sets to private"})

comments....

db.comments.insert({username : "GoodGuyGreg",
comment : "Hope you got a good deal!",
post : ObjectId("5d5a91d5030cebf13f9d5650")})

db.comments.insert({username : "GoodGuyGreg",
comment : "What's mine is yours!",
post : ObjectId("5d5a920d030cebf13f9d5651")})

db.comments.insert({username : "GoodGuyGreg",
comment : "Don't violate the licensing agreement!",
post : ObjectId("5d5a924b030cebf13f9d5652")})

db.comments.insert({username : "ScumbagSteve",
comment : "It still isn't clean",
post : ObjectId("5d5a90d8030cebf13f9d564d")})

db.comments.insert({username : "ScumbagSteve",
comment : "Denied your PR cause I found a hack",
post : ObjectId("5d5a9198030cebf13f9d564f")})

Querying related collections:

1) find all users
sol:   db.users.find().pretty()

2) find all posts
sol:  db.posts.find().pretty()

3) find all posts that was authored by "GoodGuyGreg"
sol:  db.posts.find({username:"GoodGuyGreg"}).pretty()

4)  find all posts that was authored by "ScumbagSteve"
sol: db.posts.find({username:"ScumbagSteve"}).pretty()

5)  find all comments
sol:  db.comments.find().pretty()

6)  find all comments that was authored by "GoodGuyGreg"
sol:  db.comments.find({username:"GoodGuyGreg"}).pretty()

7)  find all comments that was authored by "ScumbagSteve"
sol: db.comments.find({username:"ScumbagSteve"}).pretty()

8)  find all comments belonging to the post "Reports a bug in your code"
sol: db.comments.find({post : ObjectId("5d5a9198030cebf13f9d564f")}).pretty()